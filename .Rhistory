LS <- est6[1,4,1]+qnorm(0.975)*est6[2,4,1]
c(floor(LI),ceiling(LS))
# Total de ingreso
LI5<-est6[1,4,2]-qnorm(0.975)*est6[2,4,2]
LS5<-est6[1,4,2]+qnorm(0.975)*est6[2,4,2]
c(LI5,LS5)
# Muestreo con reemplazo
N <- nrow(Lucy)
m <- 400
f <- m/N
Nh <- table(Lucy$Level)
mh <- f*Nh # reparticion de los estratos
# Fase de seleccion
RNGkind(sample.kind="Rounding")
set.seed(31)
ind2 <- S.STPPS(Lucy$Level,Lucy$Taxes,mh)
head(ind2)
ind3 <- ind2[,1]
muestra2 <- Lucy[ind3,]
pk.s <- ind2[,2] # probs de seleccion
# Fase de Estimacion
est6<-E.STPPS(muestra2$Income,pk.s,mh,muestra2$Level)
est6
# Numero total de empresas
LI <- est6[1,4,1]-qnorm(0.975)*est6[2,4,1]
LS <- est6[1,4,1]+qnorm(0.975)*est6[2,4,1]
c(floor(LI),ceiling(LS))
# Total de ingreso
LI5<-est6[1,4,2]-qnorm(0.975)*est6[2,4,2]
LS5<-est6[1,4,2]+qnorm(0.975)*est6[2,4,2]
c(LI5,LS5)
rm(list = ls())
# Datos -------------------------------------------------------------------
datos <- read.xlsx("data/DatosMuestreoEstratificado01.xlsx", sheetName = "Hoja1")
colnames(datos)
str(datos)
head(datos)
dim(datos)
datos <- datos %>% rename(Antiguedad = AntigÃ.edad)
str(datos)
# Variables :
# - Ciudad: Ciudad de ubicación del cliente (1: La Libertad, 2: Lima, 3: Cajamarca)
# - Edad: Edad (en años) del cliente.
# - Gasto: Gasto (en soles) en pedidos mensual.
# - Botella: Tamaño de la botella más solicitada (0: 250 ml, 1: 500 ml, 2: 750ml)
# - Tiendas: Número de tiendas del cliente
# - Antiguedad: Tiempo de antigüedad en el negocio (0: ≤ 5 años, 1: >5 años).
# Muestreo aleatorio estratificado ----------------------------------------
# variable de estratificacion -> ciudad
table(datos$Ciudad)
colnames(datos)
with(datos, tapply(Gasto, Ciudad, mean))
tapply(datos$Gasto, datos$Ciudad, mean)
boxplot(datos$Gasto ~ datos$Ciudad)
boxplot(datos$Gasto ~ datos$Tiendas)
# seleccion de la muestra
N <- dim(datos)[1]
Nh <- table(datos$Ciudad)
n <- 200
f <- n/N
nh <- round(f*Nh)
RNGkind(sample.kind = "Rounding")
set.seed(10)
ind <- S.STSI(datos$Ciudad, Nh, nh)
muestra <- datos[ind,]
head(muestra)
muestra <- muestra %>% rename(Antiguedad)
# subgrupos de la muestra
attach(muestra)
colnames(muestra)
# ciudad 1, ciudad 2 y ciudad 3
c1 <- muestra %>% filter(Ciudad == "1")
c2 <- muestra %>% filter(Ciudad == "2")
c3 <- muestra %>% filter(Ciudad == "3")
# Estimacion del gasto total
est1 <- E.STSI(muestra$Ciudad, Nh, nh, muestra$Gasto)
# Estimacion del gasto promedio e IC al 90%
est2 <- est1/N
z <- qnorm(1-0.1/2)
li2 <- est2[1,4,2] - z*est2[2,4,2]
ls2 <- est2[1,4,2] + z*est2[2,4,2]
c(li2, ls2)
# Estimacion del gasto total de clientes
# con antiguedad mayor a 5 años
table(muestra$Antiguedad)
dominios <- Domains(muestra$Antiguedad)
antig.si <- dominios[,2]*muestra$Gasto
est3 <- E.STSI(muestra$Ciudad, Nh, nh, antig.si)
z <- qnorm(1-0.1/2)
li3 <- est3[1,4,2] - z*est3[2,4,2]
ls3 <- est3[1,4,2] + z*est3[2,4,2]
c(li3, ls3)
# Estimacion de la edad promedio e IC al 90%
est4 <- E.STSI(muestra$Ciudad, Nh, nh, muestra$Edad)/N
est4[1,4,2]
z <- qnorm(1-0.1/2)
li4 <- est4[1,4,2] - z*est4[2,4,2]
ls4 <- est4[1,4,2] + z*est4[2,4,2]
c(li4, ls4)
# Estimacion de la edad promedio e IC al 90%
# de los clientes con antiguedad mayor a 5
dominios <- Domains(muestra$Antiguedad)
Antig.Mayor.A5 <- dominios[,2]*muestra$Edad
est5 <- E.STSI(muestra$Ciudad, Nh, nh, Antig.Mayor.A5)
est5[1,4,2]
z <- qnorm(1-0.1/2)
li5 <- est5[1,4,2] - z*est5[2,4,2]
ls5 <- est5[1,4,2] + z*est5[2,4,2]
c(li5, ls5)
E.STSI(muestra$Ciudad, Nh, nh, dominios)
Nh <- table(datos$Ciudad)
N <- nrow(datos)
N
m <- 100
m <- 100
f <- m/N
mh <- round(f*Nh)
mh
Nh <- table(datos$Ciudad)
N <- nrow(datos)
m <- 100
f <- m/N
mh <- round(f*Nh)
mh
mh;sum(mh)
Nh <- table(datos$Ciudad)
Nh
N
m
f
mh <- round(f*Nh)
mh;sum(mh)
f*Nh
res <- S.STPPS(datos$Ciudad, datos$Tiendas,mh)
ind2 <- res[,1]
ind2
muestra2 <- datos[ind2]
muestra2 <- datos[ind2,]
colnames(datos)
pk <- res[,2]
pk
pk <- res[,2]; sum(pk)
RNGkind(sample.kind = "Rounding")
set.seed(11)
res <- S.STPPS(datos$Ciudad, datos$Tiendas,mh)
ind2 <- res[,1]
muestra2 <- datos[ind2,]
pk <- res[,2]; sum(pk)
pk
Nh <- table(datos$Ciudad)
N <- nrow(datos)
m <- 100
f <- m/N
mh <- round(f*Nh)
mh;sum(mh)
RNGkind(sample.kind = "Rounding")
set.seed(11)
res <- S.STPPS(datos$Ciudad, datos$Tiendas,mh)
ind2 <- res[,1]
muestra2 <- datos[ind2,]
pk <- res[,2]; sum(pk)
res
library(TeachingSampling)
library(sampling)
library(funModeling)
library(readxl)
datos <- read_xlsx("data/DatosMinedu.xlsx")
head(datos)
datos <- read_xlsx("data/DatosMinedu.xlsx")
head(datos)
tail(datos)
dim(datos)
df_status(datos)
rm(list = ls())
datos <- read_xlsx("data/DatosMinedu.xlsx")
head(datos)
tail(datos)
dim(datos)
df_status(datos)
N<-nrow(datos)
N
floor(N/a)
a <- 8    # salto
floor(N/a)
grupo <- as.factor(array(1:a,N))
grupo
array(1:3,4)
array(1:4,4)
array(1:3,10)
data.frame(grupo,colegio)[1:15,]
data.frame(grupo,datos)[1:15,]
df <- data.frame(grupo,datos)[1:15,]
df
S.SY(N,a)
S.SY(N,a)
head(S.SY(N,a))
head(S.SY(N,a))
head(S.SY(N,a))
head(S.SY(N,a))
str(S.SY)
RNGkind(sample.kind = "Rounding")
set.seed(78)
ind1 <- S.SY(N,a) # funcion S.SY
muestra <- colegio[ind1,]
head(muestra)
RNGkind(sample.kind = "Rounding")
set.seed(78)
ind1 <- S.SY(N,a) # funcion S.SY
muestra <- datos[ind1,]
head(muestra)
RNGkind(sample.kind = "Rounding")
set.seed(78)
ind1 <- S.SY(N,a) # funcion S.SY
muestra <- datos[ind1,]
head(muestra)
View(datos)
RNGkind(sample.kind = "Rounding")
set.seed(78)
ind1 <- S.SY(N,a) # funcion S.SY
muestra <- datos[ind1,]
head(muestra)
est1 <- E.SY(N,a,Profesores) # función E.SY
attach(muestra)
colnames(muestra)
est1 <- E.SY(N,a,Profesores) # función E.SY
est1
LI1 <- est1[1,2]-qnorm(1-0.04/2)*est1[2,2]
LS1 <- est1[1,2]+qnorm(1-0.04/2)*est1[2,2]
c(LI1,LS1)
dim(muestra)
c(LI1,LS1)
Aulas
alumnos
View(muestra)
Mensualidad
ingreso <- (Aulas*alumnos)*Mensualidad
ingreso
datos2 <- data.frame(muestra,ingreso)
head(datos2)
ingreso
datos2 <- data.frame(muestra,ingreso)
head(datos2)
est2 <- E.SY(N,a,ingreso)
est2
Profesores
sum(datos$Profesores)
sum(Profesores)
sum(muestra$Profesores)
est1
sum(Profesores)
sum(datos$Profesores)
est1[1,2]
# En la fase de estimacion se hace uso de la
# función E.SY
str(E.SY)
# En la fase de estmacion se hace uso de la
# funcion S.SY
str(S.SY)
library(TeachingSampling)
library(readxl)
rm(list = ls())
Colegio
rm(list = ls())
Colegio
detach(muestra)
rm(list = ls())
Colegio
# Clausura de objetos
detach(muestra)
rm(list = ls())
colegio <- read_xlsx("data/DatosMinedu.xlsx")
dim(colegio)
library(funModeling)
head(colegio)
tail(colegio)
df_status(colegio)
N <- dim(colegio)[1]  # longitud de poblacion
n <- 200
str(colegio)
View(colegio)
n
alumnos
colegio$alumnos
424/34
n*colegio$alumnos
pik <- n*colegio$alumnos/sum(colegio$alumnos)
pik
attach(colegio)
pik <- n*alumnos/sum(alumnos)
pik <- n*alumnos/sum(alumnos)
pik
cor(pik,cbind(alumnos,Utilidad,Mensualidad))
par(mfrow=c(1,3))
plot(pik,alumnos, main="correlación alumnos")
plot(pik,Utilidad, main = "correlación utilidad")
plot(pik,Mensualidad,main = "correlación Mensualidad")
str(S.PO)
str(S.PO)
str(S.PO)
RNGkind(sample.kind = "Rounding")
set.seed(24)
ind1 <- S.PO(N, pik)
nrow(ind1)
unique(ind1)
muestra1 <- colegio[ind1,]
dim(muestra1)
head(muestra1)
unique(ind1)
detach(colegio)
attach(muestra1)
n.s <- nrow(muestra1)
pik
pik[ind1]
pik
pik[ind1]
n.s <- nrow(muestra1)
pik.s <- pik[ind1]
est1 <- E.PO(Utilidad,pik.s)
attach(muestra1)
n.s <- nrow(muestra1)
pik.s <- pik[ind1]
est1 <- E.PO(Utilidad,pik.s)
LI1 <- est1[1,2]-qnorm(1-0.04/2)*est1[2,2]
LS1 <- est1[1,2]+qnorm(1-0.04/2)*est1[2,2]
c(LI1,LS1)
detach(muestra1)
# N : estimacion de la longitud de la poblacion
# Y : estimacion del total de la variable de interes
LI1 <- est1[1,2] - qnorm(1-0.04/2)*est1[2,2]
LS1 <- est1[1,2] + qnorm(1-0.04/2)*est1[2,2]
c(LI1,LS1)
sum(colegio$Utilidad)
est1
dim(colegio)
# DEFF = 1.76 : el disenio de muestreo Poisson
# es menos eficiente que el muestreo aleatorio
# simple
detach(muestra1)
rm(list = ls())
cole
colegio
library(TeachingSampling)
library(readxl)
colegios <- read_xlsx("data/DatosMinedu.xlsx")
colegios <- read_xlsx("data/DatosMinedu.xlsx")
dim(colegios)
head(colegios)
tail(colegios)
library(funModeling)
df_status(colegios)
attach(colegios)
m <- 200
pk <- alumnos/sum(alumnos)
str(S.PPS)
ind1 <- S.PPS(m,alumnos)
m <- 200
pk <- alumnos/sum(alumnos)
RNGkind(sample.kind = "Rounding")
set.seed(5)
ind1 <- S.PPS(m,alumnos)
muestra1 <- colegios[ind1,]
dim(muestr1)
head(muestra1)
RNGkind(sample.kind = "Rounding")
set.seed(5)
ind1 <- S.PPS(m,alumnos)
muestra1 <- colegios[ind1,]
dim(muestra1)
head(muestra1)
ind1 <- S.PPS(m,alumnos)
ind1
pk[138]
pk[691]
dim(muestra1)
RNGkind(sample.kind = "Rounding")
set.seed(5)
ind1 <- S.PPS(m,alumnos)
muestra1 <- colegios[ind1,]
muestra1 <- colegios[ind1[1],]
dim(muestra1)
head(muestra1)
muestra1
RNGkind(sample.kind = "Rounding")
set.seed(5)
ind1 <- S.PPS(m,alumnos)
muestra1 <- colegios[ind1[,1],]
dim(muestra1)
head(muestra1)
tail(muestra1)
pk.s <- pk[ind1[,1]]
pk.s
pk.s <- pk[ind1[,1]]
tail(ind1)
detach(colegios)
attach(muestra1)
est1 <- E.PPS(Aulas, pk.s)
est1
est1
LI1 <- est1[1,2]-qnorm(1-0.04/2)*est1[2,2]
LS1 <- est1[1,2]+qnorm(1-0.04/2)*est1[2,2]
c(LI1,LS1)
sum(colegios$Aulas)
cor(alumnos, (Utilidad^2/alumnos))
cor(alumnos, (Profesores^2/alumnos))
cor(alumnos, (Mensualidad^2/alumnos))
cor(alumnos, (Mensualidad^2/alumnos))
(N^2/m)*cov(alumnos, (Mensualidad^2/alumnos))
dim(colegios)
(900^2/m)*cov(alumnos, (Mensualidad^2/alumnos))
(900^2/m)*cov(alumnos, (Mensualidad^2/alumnos))
par(mfrow=c(1,3))
plot(Utilidad/alumnos)
abline(h=mean(Utilidad/alumnos), col=2)
plot(Profesores/alumnos)
abline(h=mean(Profesores/alumnos), col=2)
plot(Mensualidad/alumnos)
abline(h=mean(Mensualidad/alumnos), col=2)
par(mfrow=c(1,3))
plot(Utilidad/alumnos)
abline(h=mean(Utilidad/alumnos), col=2)
plot(Profesores/alumnos)
abline(h=mean(Profesores/alumnos), col=2)
plot(Mensualidad/alumnos)
abline(h=mean(Mensualidad/alumnos), col=2)
M.I <- lm(Utilidad~alumnos)
summary(M.I)
summary(M.I)
# Para que la estrategia de muestreo PPT sea
# mas eficiente, en terminos de varianza, que
# la estrategia de muestreo aleatorio simple
# con reemplazo, es necesario que las correla-
# ciones siguientes sean positivas.
cor(alumnos, (Utilidad^2/alumnos))
cor(alumnos, (Profesores^2/alumnos))
cor(alumnos, (Mensualidad^2/alumnos))
est1
LI1 <- est1[1,2]-qnorm(1-0.04/2)*est1[2,2]
LS1 <- est1[1,2]+qnorm(1-0.04/2)*est1[2,2]
c(LI1,LS1)
est1
vPPT <- est1[2,2]^2
vPPT
N
N <- dim(colegios)[1]
vMAS <- N^2*(1-m/N)*var(muestra$Aulas)/m
vMAS <- N^2*(1-m/N)*var(muestra1$Aulas)/m
vMAS
vMAS1 <- N^2*(1-m/N)*var(muestra1$Aulas)/m
vMAS2 <- est1[1,1]^2*(1-m/est1[1,1])*var(muestra1$Aulas)/m
vPPT/vMAS1
vPPT/vMAS2
# Verificacion de la estrategia de muestreo PPT
# ¿cumple con las condiciones de optimalidad?
par(mfrow=c(1,2))
plot(alumnos/Aulas)
abline(h=mean(alumnos/Aulas),col=2)
plot(alumnos/Profesores)
abline(h=mean(alumnos/Profesores),col=2)
# Para que la estrategia de muestreo PPT sea
# mas eficiente, en terminos de varianza, que
# la estrategia de muestreo aleatorio simple
# con reemplazo, es necesario que las correla-
# ciones siguientes sean positivas.
cor(alumnos, (Utilidad^2/alumnos))
cor(alumnos, (Profesores^2/alumnos))
cor(alumnos, (Mensualidad^2/alumnos))
detach(muestra1)
rm(list = ls())
library(TeachingSampling)
library(readxl)
library(funModeling)
rm(list = ls())
colegios <- read_xlsx("data/DatosMinedu.xlsx")
dim(colegios)
head(colegios)
tail(colegios)
df_status(colegios)
# Fase de seleccion
attach(colegio)
# Fase de seleccion
attach(colegios)
N <- nrow(colegios)
m<-200
m<-200
pk <- m*alumnos/sum(alumnos)
ind1 <- S.piPS(m, alumnos)
RNGkind(sample.kind = "Rounding")
set.seed(5)
ind1 <- S.piPS(m, alumnos)
muestra1 <- colegio[ind1,]
muestra1 <- colegios[ind1,]
pk <- m*alumnos/sum(alumnos)
RNGkind(sample.kind = "Rounding")
set.seed(5)
ind1 <- S.piPS(m, alumnos)
muestra1 <- colegios[ind1,]
ind1
muestra1 <- colegios[ind1[1],]
muestra1
muestra1 <- colegios[ind1[,1],]
muestra1
head(muestra1)
detach(colegios)
attach(muestra1)
pk.s3<-pk[ind1]
pk.s1<-pk[ind1]
pk.s1
est1 <- E.piPS(Profesores,pk.s1)
est1 <- E.piPS(Profesores,pk.s1)
est1
est1[1,2]
est1[2,2]
